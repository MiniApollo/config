#+Title: MiniApollo's Gnu Emacs Config
#+Author: MiniApollo
#+Description: My personal emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :toc:
- [[#core-setup--performance][Core Setup & Performance]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#show-startup-time][Show startup time]]
  - [[#package-manager][Package manager]]
  - [[#good-defaults][Good Defaults]]
- [[#important-to-load-first][Important to load first]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#appearance][Appearance]]
  - [[#set-theme][Set Theme]]
  - [[#transparency][Transparency]]
  - [[#setting-fonts][Setting Fonts]]
  - [[#doom-modeline][Doom Modeline]]
  - [[#nerd-icons][Nerd Icons]]
- [[#development][Development]]
  - [[#projectile][Projectile]]
  - [[#consult-dir][Consult-dir]]
  - [[#eglot][Eglot]]
  - [[#sideline-flymake][Sideline-flymake]]
  - [[#yasnippet][Yasnippet]]
  - [[#tree-sitter][Tree-Sitter]]
  - [[#language-modes][Language modes]]
  - [[#terminal][Terminal]]
- [[#version-control][Version Control]]
  - [[#magit][Magit]]
  - [[#diff-hl][Diff-hl]]
- [[#completion][Completion]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
- [[#other-packages][Other packages]]
  - [[#consult][Consult]]
  - [[#undotree][UndoTree]]
  - [[#sudo-edit][Sudo edit]]
  - [[#evil-mc][Evil-mc]]
  - [[#helpful][Helpful]]
  - [[#diminish][Diminish]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#which-key][Which-Key]]
  - [[#ws-butler][Ws-butler]]
  - [[#yaml-parser][Yaml parser]]
- [[#runtime-performance][Runtime Performance]]

* Core Setup & Performance
These are essential settings and small tweaks that must load before any packages.
They impact the entire configuration, skipping these could result in significantly slower configuration and potential breakage of your setup.

** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times, it refreshes the package-quickstart file.
We'll cover package quickstart in the package manager section later.

If you like to auto tangle an Org file, don't forget to add the following line to the top of your Org document:
(#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.
#+begin_src emacs-lisp
    (defun start/org-babel-tangle-config ()
      "Automatically tangle our init.org config file and refresh package-quickstart when we save it. Credit to Emacs From Scratch for this one!"
      (interactive)
      (when (string-equal (file-name-directory (buffer-file-name))
    					  (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
    	  (org-babel-tangle)
    	  (package-quickstart-refresh)
    	  )
        ))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'start/org-babel-tangle-config)))
#+end_src

** Show startup time
#+begin_src emacs-lisp
    (defun start/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
    					(time-subtract after-init-time before-init-time)))
               gcs-done))

    (add-hook 'emacs-startup-hook #'start/display-startup-time)
#+end_src

** Package manager
We use the default built in package manager package.el.
In my experience Package.el is not slow and gets the job done.

To update/upgrade packages, use the package-upgrade-all command.
*** Use-package
A macro that allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy.
We use it because it makes package configuration really easy.

With Emacs 29 use-package is now built-in.
#+begin_src emacs-lisp
    (require 'use-package-ensure) ;; Load use-package-always-ensure
    (setq use-package-always-ensure t) ;; Always ensures that a package is installed
#+end_src

*** Setting package repositories
Like Linux distributions, Emacs uses repositories to manage its packages.
#+begin_src emacs-lisp
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal
#+end_src

*** Package quickstart
Improves startup times by allowing Emacs to precompute and generate a single, large autoload file.
Instead of re-computing them on every startup.

The larger your configuration, the more it will be felt at startup.

Package quickstart only works with package.el.
If you plan to use a different package manager, remember to remove this section and the package-quickstart-refresh line in the Auto-tangle hook.
#+begin_src emacs-lisp
    (setq package-quickstart t) ;; For blazingly fast startup times, this line makes startup miles faster
#+end_src


** Good Defaults
#+begin_src emacs-lisp
    (use-package emacs
      :custom
      (menu-bar-mode nil)         ;; Disable the menu bar
      (scroll-bar-mode nil)       ;; Disable the scroll bar
      (tool-bar-mode nil)         ;; Disable the tool bar
      (inhibit-startup-screen t)  ;; Disable welcome screen

      (delete-selection-mode t)   ;; Select text and delete it by typing.
      (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
      (electric-pair-mode t)      ;; Turns on automatic parens pairing

      (blink-cursor-mode nil)     ;; Don't blink cursor
      (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

      (dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
      (recentf-mode t) ;; Enable recent file mode

      (global-visual-line-mode t)           ;; Enable truncated lines
      (display-line-numbers-type 'relative) ;; Relative line numbers
      (global-display-line-numbers-mode t)  ;; Display line numbers

      (mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
      (scroll-conservatively 10) ;; Smooth scrolling
      (scroll-margin 8)

      (tab-width 4)
      (sgml-basic-offset 4) ;; Set Html mode indentation to 4
      (c-ts-mode-indent-offset 4) ;; Fix weird indentation in c-ts (C, C++)
      (go-ts-mode-indent-offset 4) ;; Fix weird indentation in go-ts

      (make-backup-files nil) ;; Stop creating ~ backup files
      (auto-save-default nil) ;; Stop creating # auto save files
      :hook
      (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
      :config
      ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
      (setq custom-file (locate-user-emacs-file "custom-vars.el"))
      (load custom-file 'noerror 'nomessage)
      :bind (
             ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
             ;; Zooming In/Out
             ("C-+" . text-scale-increase)
             ("C--" . text-scale-decrease)
             ("<C-wheel-up>" . text-scale-increase)
             ("<C-wheel-down>" . text-scale-decrease)
             )
      )
#+end_src

* Important to load first
Packages that we want to load first so we have them as soon as possible if something breaks.
** Evil Mode
An extensible vi/vim layer for Emacs.

Notes:
- You can toggle evil mode with C-z.
- To paste without yank select the text and use P. This line is especially for ThePrimeagen :)
#+begin_src emacs-lisp
    (use-package evil
      :init
      (evil-mode)
      :config
      (evil-set-initial-state 'eat-mode 'insert) ;; Set initial state in eat terminal to insert mode
      :custom
      (evil-want-keybinding nil)    ;; Disable evil bindings in other modes (It's not consistent and not good)
      (evil-want-C-u-scroll t)      ;; Set C-u to scroll up
      (evil-want-C-i-jump nil)      ;; Disables C-i jump
      (evil-undo-system 'undo-tree) ;; C-r to redo
      (org-return-follows-link t)   ;; Sets RETURN key in org-mode to follow links
      ;; Unmap keys in 'evil-maps. If not done, org-return-follows-link will not work
      :bind (:map evil-motion-state-map
                  ("SPC" . nil)
                  ("RET" . nil)
                  ("TAB" . nil)))
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dired ibuffer magit corfu vertico consult info vterm))
      (evil-collection-init))
#+end_src

** General Keybindings
A keybinding framework to set keybindings easily.

We use general because it gives:
- a convenient method for binding keys.
- easy leader key integration.
- good evil-mode and which-key support.
- a consistent and unified interface for managing keybinds.
And it is also really customizable.
#+begin_src emacs-lisp
    (use-package general
      :config
      (general-evil-setup) ;; <- evil
      ;; Set up 'C-SPC' as the leader key
      (general-create-definer mark/leader-keys
        :states '(normal insert visual motion emacs) ;; <- evil
        :keymaps 'override
        :prefix "SPC"
        :global-prefix "C-SPC") ;; Set global leader key so we can access our keybindings from any state

      (mark/leader-keys
        "." '(find-file :wk "Find file")
        "TAB" '(comment-line :wk "Comment lines")
        "q" '(flymake-show-buffer-diagnostics :wk "Flymake buffer diagnostic")
        "u" '(undo-tree-visualize :wk "Undotree")
        "p" '(projectile-command-map :wk "Projectile")
        "s p" '(projectile-discover-projects-in-search-path :wk "Search for projects"))

      (mark/leader-keys
        "s" '(:ignore t :wk "Search")
        "s c" '((lambda () (interactive) (find-file "~/.config/emacs/init.org")) :wk "Find emacs Config")
        "s r" '(consult-recent-file :wk "Search recent files")
        "s f" '(consult-fd :wk "Search files with fd")
        "s g" '(consult-ripgrep :wk "Search with ripgrep")
        "s l" '(consult-line :wk "Search line")
        "s i" '(consult-imenu :wk "Search Imenu buffer locations")
    	"s e"' (sudo-edit :wk "Root edit current file")
    	"s u"' (sudo-edit-find-file :wk "Root find file"))

      (mark/leader-keys
        "d" '(:ignore t :wk "Buffers & Dired")
        "d s" '(consult-buffer :wk "Switch buffer")
        "d k" '(kill-current-buffer :wk "Kill current buffer")
        "d i" '(ibuffer :wk "Ibuffer")
        "d n" '(next-buffer :wk "Next buffer")
        "d p" '(previous-buffer :wk "Previous buffer")
        "d r" '(revert-buffer :wk "Reload buffer")
        "d v" '(dired :wk "Open dired")
        "d j" '(dired-jump :wk "Dired jump to current")
    	"d a" '(consult-dir :wk "Consult dir"))

      (mark/leader-keys
        "e" '(:ignore t :wk "Languages")
        "e e" '(eglot-reconnect :wk "Eglot Reconnect")
        "e d" '(eldoc-doc-buffer :wk "Eldoc Buffer")
        "e f" '(eglot-format :wk "Eglot Format")
        "e l" '(consult-flymake :wk "Consult Flymake")
        "e r" '(eglot-rename :wk "Eglot Rename")
        "e i" '(xref-find-definitions :wk "Find definition")
        "e v" '(:ignore t :wk "Elisp")
        "e v b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e v r" '(eval-region :wk "Evaluate elisp in region"))

      (mark/leader-keys
        "g" '(:ignore t :wk "Git")
        "g s" '(magit-status :wk "Magit status"))

      (mark/leader-keys
        "h" '(:ignore t :wk "Help") ;; To get more help use C-h commands (describe variable, function, etc.)
        "h q" '(save-buffers-kill-emacs :wk "Quit Emacs and Daemon")
        "h r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload Emacs config"))

      (mark/leader-keys
    	"v" '(:ignore t :wk "Vterm")
    	"v m" '(multi-vterm :wk "New Multi Vterm")
    	"v n" '(multi-vterm-next :wk "Vterm next")
    	"v p" '(multi-vterm-prev :wk "Vterm previus")
    	"v d" '(multi-vterm-dedicated-toggle :wk "Toggle dedicated Vterm"))

      (mark/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    	"t m" '(evil-mc-mode :wk "Evil mc mode"))
      )

    ;; Fix general.el leader key not working instantly in messages buffer with evil mode
    (use-package emacs
      :ghook ('after-init-hook
              (lambda (&rest _)
                (when-let ((messages-buffer (get-buffer "*Messages*")))
                  (with-current-buffer messages-buffer
                    (evil-normalize-keymaps))))
              nil nil t)
      )
#+end_src

* Appearance
** Set Theme
Set gruvbox theme, if you want some themes try out doom-themes.
Use consult-theme to easily try out themes (*Epilepsy* Warning).
#+begin_src emacs-lisp
    (use-package gruvbox-theme
      :config
      (setq gruvbox-bold-constructs t)
      (load-theme 'gruvbox-dark-medium t)) ;; We need to add t to trust this package
#+end_src

** Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 90)) ;; For all new frames henceforth
#+end_src

** Setting Fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :font "JetBrains Mono" ;; Set your favorite type of font or download JetBrains Mono
                        :height 120
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.

    (add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
    (setq-default line-spacing 0.12)
#+end_src

** Doom Modeline
A fancy, fast and customizable mode-line.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :custom
      (doom-modeline-height 25) ;; Set modeline height
      :hook (after-init . doom-modeline-mode))
#+end_src

** Nerd Icons
This is an icon set that can be used with dired, ibuffer and other Emacs packages.
Don't forget nerd-icons-install-fonts to install the resource fonts.

We use nerd-icons because it supports both GUI and TUI unlike all-the-icons.
Also Doom modeline requires nerd icons.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

* Development
** Projectile
Project interaction library for Emacs.

Emacs has a built in project manager called project.el, but we don't use it.
You can try it out with the keybinds under C-x p because project.el does not require any special setup to use.

We use projectile because it:
- supports more features and project types.
- has better integration with projects.
- has better documentation.
- is developed faster.
More [[https://docs.projectile.mx/projectile/projectile_vs_project.html][reasons]] to use projectile.
#+begin_src emacs-lisp
    (use-package projectile
      :config
      (projectile-mode)
      :custom
      (projectile-auto-discover nil) ;; Disable auto search for better startup times ;; Search with a keybind
      (projectile-run-use-comint-mode t) ;; Interactive run dialog when running projects inside emacs (like giving input)
      (projectile-switch-project-action #'projectile-dired) ;; Open dired when switching to a project
      (projectile-project-search-path '(("/mnt/Ext4D/Mark/Projektek/" . 2)
                                        ("/mnt/Ext4D/Mark/Projektek/Desktop/Gyakorlas/" . 2)
    									)))
#+end_src

** Consult-dir
#+begin_src emacs-lisp
    (use-package consult-dir
      :defer
      :custom 
      (consult-dir-default-command #'consult-dir-dired)
      :config 
      ;; A function that returns a list of directories
      (defun consult-dir--work-dirs ()
        "Return list of work dirs."
        (append
         (split-string (shell-command-to-string "find ~/.config -maxdepth 1 -type d") "\n" t)
         (split-string (shell-command-to-string "find /mnt/Ext4D/Mark/Projektek/ /mnt/Ext4D/Mark/Projektek/Desktop/Gyakorlas/ -mindepth 2 -maxdepth 2 -type d") "\n" t)
         )
        )

      ;; A consult source that calls this function
      (defvar consult-dir--source-work
        `(:name     "Work Directories"
                    :narrow   ?w
                    :category file
                    :face     consult-file
                    :history  file-name-history
                    :enabled  ,(lambda () (executable-find "find"))
                    :items    ,#'consult-dir--work-dirs)
        "Work directory source for `consult-dir'.")

      ;; Adding to the list of consult-dir sources
      (add-to-list 'consult-dir-sources 'consult-dir--source-work t))
#+end_src

** Eglot
Built in Emacs client for the Language Server Protocol.
We use Eglot because it is fast and minimal.
For more: C-h i: g: (eglot)Top

Eglot does not automatically download LSP servers. It requires separate download.
The easiest way to install LSP servers is with a package manager.

If you can't use a package manager you can do the following:
- Download the server (e.g. from github)
- Add the binary/executable to your path.
- Or customize the eglot-server-programs list.
To control how a LSP server is started customize the eglot-server-programs list.
#+begin_src emacs-lisp
    (use-package eglot
      :ensure nil ;; Don't install eglot because it's now built-in
      :hook ((c-ts-mode c++-ts-mode
                        csharp-mode java-ts-mode
                        html-ts-mode css-ts-mode
                        js-ts-mode typescript-ts-mode
                        php-ts-mode cmake-ts-mode
                        go-ts-mode rust-ts-mode
                        gdscript-mode glsl-mode haskell-mode)
             . eglot-ensure)
      :custom
      ;; Good default
      (eglot-events-buffer-size 0) ;; No event buffers (LSP server logs)
      (eglot-autoshutdown t);; Shutdown unused servers.
      (eglot-report-progress nil) ;; Disable LSP server logs (Don't show lsp messages at the bottom, java)
      ;; Manual lsp servers
      ;;:config
      ;;(add-to-list 'eglot-server-programs
      ;;             `(lua-mode . ("PATH_TO_THE_LSP_FOLDER/bin/lua-language-server" "-lsp"))) ;; Adds our lua lsp server to eglot's server list
      )
#+end_src

** Sideline-flymake
Show flymake errors with sideline
#+begin_src emacs-lisp
    (use-package sideline-flymake
      :hook (flymake-mode . sideline-mode)
      :custom
      (sideline-flymake-display-mode 'line) ;; show errors on the current line
      (sideline-backends-right '(sideline-flymake)))
#+end_src

** Yasnippet
A template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it write out the full keyword (or use autocompletion) and press Tab.
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))

    (use-package yasnippet-capf
      :after (cape yasnippet)
      :config
      (add-hook 'completion-at-point-functions #'yasnippet-capf))

    (defun mark/corfu-yas-tab-handler ()
      "Prioritize corfu over yasnippet when yasnippet is active"
      (interactive)
      ;; There is no direct way to get if corfu is currently displayed so we watch the completion index
      (if (> corfu--index -1)
          (corfu-complete)
        (yas-next-field-or-maybe-expand)
        )
      )
    (use-package emacs
      :after (yasnippet corfu)
      :bind
      (:map yas-keymap
            ("TAB" . mark/corfu-yas-tab-handler))
      )
#+end_src

** Tree-Sitter
A parser generator tool and an incremental parsing library.
Check out TJ's [[https://www.youtube.com/watch?v=09-9LltqWLY][video]] to learn why you should use it.

With Emacs 29 Tree-Sitter is now built-in. You may need to compile Emacs from source to have it enabled.
You also need to have a compiler installed so Emacs can compile the parsers into a shared library.
For more info about how to use Tree-Sitter check out this [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][masteringemacs]] article.

Using Tree-Sitter is somewhat hacky because it requires you to:
- manually manage a source list of the parsers you want to use.
- remap the major modes you want to use.
You can also use treesit-auto, but it is updated quite slowly so we don't use it.

*To use it, remove :tangle no from the beginning of the source code block.*
#+begin_src emacs-lisp
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (c "https://github.com/tree-sitter/tree-sitter-c")
            (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (gomod "https://github.com/camdencheek/tree-sitter-go-mod")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (rust "https://github.com/tree-sitter/tree-sitter-rust")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

    (defun start/install-treesit-grammars ()
      "Install missing treesitter grammars"
      (interactive)
      (dolist (grammar treesit-language-source-alist)
        (let ((lang (car grammar)))
          (unless (treesit-language-available-p lang)
            (treesit-install-language-grammar lang)))))

    ;; Call this function to install missing grammars
    (start/install-treesit-grammars)

    ;; Optionally, add any additional mode remappings not covered by defaults
    (setq major-mode-remap-alist
          '((yaml-mode . yaml-ts-mode)
            (sh-mode . bash-ts-mode)
            (c-mode . c-ts-mode)
            (c++-mode . c++-ts-mode)
            (css-mode . css-ts-mode)
            (python-mode . python-ts-mode)
            (mhtml-mode . html-ts-mode)
            (javascript-mode . js-ts-mode)
            (json-mode . json-ts-mode)
            (typescript-mode . typescript-ts-mode)
            (conf-toml-mode . toml-ts-mode)
            ))
    (setq treesit-font-lock-level 4)

    ;; Or if there is no built in mode
    (use-package rust-ts-mode :ensure nil :mode "\\.rs\\'")
    (use-package go-ts-mode :ensure nil :mode "\\.go\\'")
    (use-package go-mod-ts-mode :ensure nil :mode "\\.mod\\'")
    (use-package tsx-ts-mode :ensure nil :mode "\\.tsx\\'")
    (use-package cmake-ts-mode :ensure nil :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
    (use-package yaml-ts-mode :ensure nil :mode ("\\.yaml\\'"))
#+end_src

** Language modes
Emacs contains many “editing modes” that alter its basic behavior in
useful ways. These are divided into “major modes” and “minor modes”.
For more: C-h i: g: (emacs)Modes

Some programming languages require the installation of specific modes to fully integrate and function within Emacs.
These packages are often necessary for features like syntax highlighting, code formatting, linting, and language-specific features.

*** Markdown mode
#+begin_src emacs-lisp
    (use-package markdown-mode
      :mode "\\.md\\'")
#+end_src

*** Haskell mode
#+begin_src emacs-lisp
    (use-package haskell-mode
      :mode "\\.hs\\'")
#+end_src

*** Org Mode
One of the things that Emacs is loved for.
Once you've used it for a bit, you'll understand why people love it. Even reading about it can be inspiring!
For example, this document is effectively the source code and descriptions bound into the one document,
much like the literate programming ideas that Donald Knuth made famous.

We use an Org mode document for our Emacs configuration because it provides:
- Better organization: It lets us structure with outlines, headings, and tags.
- Literate Documentation: It's a document, not just source code.
- Fast Navigation: Quickly jump to sections with something like Imenu.
#+begin_src emacs-lisp
    (use-package org
      :ensure nil
      :custom
      (org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.

      :hook
      (org-mode . org-indent-mode) ;; Indent text
      ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
      ;; Otherwise, org-tempo is broken when you try to <s TAB...
      (org-mode . (lambda ()
                    (setq-local electric-pair-inhibit-predicate
                                `(lambda (c)
                                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
      )
#+end_src

**** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src

**** Org Superstar
Prettify headings and plain lists in Org mode. Modern version of org-bullets.
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode))
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src

** Terminal
*** VTerm
Fully-fledged terminal emulator inside GNU Emacs.
Fast, POSIX compliant shell, handles UIs well.
#+begin_src emacs-lisp
    (use-package vterm
      :defer
      :custom
      (vterm-max-scrollback 5000))
#+end_src
*** Multi-vterm
Managing multiple vterm buffers in Emacs
#+begin_src emacs-lisp
    (use-package multi-vterm
      :after vterm)
#+end_src

* Version Control
** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :defer
      :custom (magit-diff-refine-hunk (quote all)) ;; Shows inline diff
      :config (define-key transient-map (kbd "<escape>") 'transient-quit-one) ;; Make escape quit magit prompts
      )
#+end_src

** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
             (magit-post-refresh . diff-hl-magit-post-refresh))
      :init (global-diff-hl-mode))
#+end_src

* Completion
** Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
For more configuration options check out their [[https://github.com/minad/corfu][git repository]].
Notes:
- To enter Orderless field separator, use M-SPC.
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      (corfu-auto-prefix 2)          ;; Minimum length of prefix for auto completion.
      (corfu-popupinfo-mode t)       ;; Enable popup information
      (corfu-popupinfo-delay 0.5)    ;; Lower popup info delay to 0.5 seconds from 2 seconds
      (corfu-separator ?\s)          ;; Orderless field separator, Use M-SPC to enter separator

      (completion-ignore-case t)
      ;; Emacs 30 and newer: Disable Ispell completion function.
      ;; Try `cape-dict' as an alternative.
      (text-mode-ispell-word-completion nil)

      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)

      (corfu-preview-current nil) ;; Don't insert completion without confirmation
      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
Provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI.
Notes:
- The functions that are added later will be the first in the completion list.
- Be aware when adding Capfs (Completion-at-point-functions) to the list since each of the Capfs adds a small runtime cost.
Read the [[https://github.com/minad/cape#configuration][configuration section]] in Cape's readme for more information.
#+begin_src emacs-lisp
    (use-package cape
      :after corfu
      :init
      ;; Add to the global default value of `completion-at-point-functions' which is
      ;; used by `completion-at-point'.  The order of the functions matters, the
      ;; first function returning a result wins.  Note that the list of buffer-local
      ;; completion functions takes precedence over the global list.

      ;; The functions that are added later will be the first in the list
      (add-hook 'completion-at-point-functions #'cape-dabbrev) ;; Complete word from current buffers
      (add-hook 'completion-at-point-functions #'cape-dict) ;; Dictionary completion
      (add-hook 'completion-at-point-functions #'cape-file) ;; Path completion
      (add-hook 'completion-at-point-functions #'cape-elisp-block) ;; Complete elisp in Org or Markdown mode
      (add-hook 'completion-at-point-functions #'cape-keyword) ;; Keyword completion

      ;;(add-hook 'completion-at-point-functions #'cape-abbrev) ;; Complete abbreviation
      ;;(add-hook 'completion-at-point-functions #'cape-history) ;; Complete from Eshell, Comint or minibuffer history
      ;;(add-hook 'completion-at-point-functions #'cape-line) ;; Complete entire line from current buffer
      ;;(add-hook 'completion-at-point-functions #'cape-elisp-symbol) ;; Complete Elisp symbol
      ;;(add-hook 'completion-at-point-functions #'cape-tex) ;; Complete Unicode char from TeX command, e.g. \hbar
      ;;(add-hook 'completion-at-point-functions #'cape-sgml) ;; Complete Unicode char from SGML entity, e.g., &alpha
      ;;(add-hook 'completion-at-point-functions #'cape-rfc1345) ;; Complete Unicode char using RFC 1345 mnemonics
      )
#+end_src

** Orderless
Completion style that divides the pattern into space-separated components and matches candidates that match all of the components in any order.
Recommended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

We use these packages because they use Emacs native functions. Unlike Ivy or Helm.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

* Other packages
All the package setups that don't need much tweaking.
** Consult
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
    (use-package consult
      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      :config
       ;;;; 4. projectile.el (projectile-project-root)
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-function (lambda (_) (projectile-project-root)))
      )
#+end_src

** UndoTree
Visualizes undo history.
#+begin_src emacs-lisp
    (use-package undo-tree
      :init
      (global-undo-tree-mode)
      :custom
      (undo-tree-visualizer-diff t)
      (undo-tree-visualizer-timestamps t)
      ;; Use separate directory for undo history
      (undo-tree-history-directory-alist '(("." . "~/.config/emacs/undoTree"))))
#+end_src

** Sudo edit
Utilities for opening files with root privileges (also works with doas).
#+begin_src emacs-lisp
    (use-package sudo-edit
      :defer
      :custom (sudo-edit-local-method "doas")) ;; To use doas
#+end_src

** Evil-mc
Multiple-cursors for evil mode.
#+begin_src emacs-lisp
    (use-package evil-mc
      :commands (evil-mc-mode))
#+end_src

** Helpful
An alternative to the built-in Emacs help that provides much more contextual information.
#+begin_src emacs-lisp
    (use-package helpful
      :bind
      ;; Note that the built-in `describe-function' includes both functions
      ;; and macros. `helpful-function' is functions only, so we provide
      ;; `helpful-callable' as a drop-in replacement.
      ("C-h f" . helpful-callable)
      ("C-h v" . helpful-variable)
      ("C-h k" . helpful-key)
      ("C-h x" . helpful-command)
      )
#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Rainbow Mode
Display the actual color as a background for any hex color value (ex. #ffffff).
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :diminish
      :hook
      ((org-mode prog-mode) . rainbow-mode))
#+end_src

** Which-Key
Which-key is a helper utility for keychords (which key to press).
#+begin_src emacs-lisp
    (use-package which-key
      :ensure nil ;; Don't install which-key because it's now built-in
      :init
      (which-key-mode 1)
      :diminish
      :custom
      (which-key-side-window-location 'bottom)
      (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
      (which-key-sort-uppercase-first nil)
      (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
      (which-key-min-display-lines 6)  ;; Increase the minimum lines to display because the default is only 1
      (which-key-idle-delay 0.8)       ;; Set the time delay (in seconds) for the which-key popup to appear
      (which-key-max-description-length 25)
      (which-key-allow-imprecise-window-fit nil)) ;; Fixes which-key window slipping out in Emacs Daemon
#+end_src

** Ws-butler
Removes whitespace from the ends of lines.
#+begin_src emacs-lisp
    (use-package ws-butler
      :init (ws-butler-global-mode))
#+end_src

** Yaml parser
For development
#+begin_src emacs-lisp
    (use-package yaml :defer)
#+end_src

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so Emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
