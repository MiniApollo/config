Title: MiniApollo Gnu Emacs Config
#+Author: MiniApollo
#+Description: My personal emacs configuration
#+Startup: showeverything
#+Options: toc:2

* Table Of Content :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#startup-performance][Startup Performance]]
  - [[#use-package-setup][Use Package setup]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#sane-defaults][SANE DEFAULTS]]
- [[#set-theme][Set Theme]]
- [[#transparency][Transparency]]
- [[#fonts][Fonts]]
  - [[#setting-fonts][Setting fonts]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#modeline][Modeline]]
- [[#dashboard][DashBoard]]
- [[#projectile][Projectile]]
- [[#language-support--lsp][Language support + Lsp]]
  - [[#treesiter][Treesiter]]
  - [[#lsp-mode][Lsp Mode]]
  - [[#yasnippet][Yasnippet]]
  - [[#language-modes][Language modes]]
- [[#terminal][Terminal]]
  - [[#vterm][Vterm]]
- [[#other-packages][Other Packages]]
  - [[#all-the-icons][ALL THE ICONS]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#magit][Magit]]
  - [[#company][Company]]
  - [[#ivy-counsel][Ivy (counsel)]]
  - [[#diminish][DIMINISH]]
  - [[#undotree][UndoTree]]
  - [[#rainbow-delimiters][RAINBOW DELIMITERS]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#which-key][WHICH-KEY]]
- [[#runtime-performance][Runtime Performance]]

* IMPORTANT PROGRAMS TO LOAD FIRST
To keep this config.org a reasonable length, I have moved a lot of code to individual scripts that will be sourced by this config.  These scripts are found in “~/.config/emacs/scripts” and do not contain any code that most people are likely to need to edit.
** Startup Performance 
Make startup faster by reducing the frequency of garbage collection and then use a hook to measure Emacs startup time.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Use Package setup 
#+begin_src emacs-lisp
    (require 'package)
    (require 'use-package)
    (setq use-package-always-ensure t)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
#+end_src

** Load Evil Mode
Evil is an extensible vi/vim layer for Emacs.  Because…let’s face it.  The Vim keybindings are just plain better.
#+begin_src emacs-lisp
    (use-package evil
      :init ;; tweak evil's configuration before loading it
      (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
      (setq evil-want-keybinding nil)
      (setq evil-want-C-u-scroll t)
      (setq evil-want-C-i-jump nil)
      (setq evil-want-C-i-jump nil)
      (setq evil-vsplit-window-right t)
      (setq evil-split-window-below t)
      (setq evil-undo-system 'undo-tree) ;; ctrl r to work (redo) with UndoTree for stock Emacs undo-redo
      (setq org-return-follows-link  t) ;; Setting RETURN key in org-mode to follow links
      (evil-mode))
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dashboard dired ibuffer magit))
      (evil-collection-init))
    ;; Unmap keys in 'evil-maps if not done, (setq org-return-follows-link t) will not work
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil)
      ;; When line wrap is on don't jump lines but visual lines 
      (evil-global-set-key 'motion "j" 'evil-next-visual-line)
      (evil-global-set-key 'motion "k" 'evil-previous-visual-line))
#+end_src

** General Keybindings
#+begin_src emacs-lisp
    (use-package general
      :config
      (general-evil-setup)
      ;; set up 'SPC' as the global leader key
      (general-create-definer mark/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC" ;; set leader
        :global-prefix "C-SPC") ;; access leader in insert mode

      (mark/leader-keys
        "." '(find-file :wk "Find file")
        "TAB" '(comment-line :wk "Comment lines")
        "p" '(projectile-command-map :wk "Projectile command map"))

      (mark/leader-keys 
        "f" '(:ignore t :wk "Find")
        "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "f u"' ((lambda () (interactive) (find-file "/doas::/")) :wk "Root find file")
        "f r" '(counsel-recentf :wk "Recent files"))

      (mark/leader-keys 
        "u" '(:ignore t :wk "UndoTree")
        "u u" '(undo-tree-visualize :wk "Show Undo-Tree")
        "u l" '(undo-tree-visualize-switch-branch-left :wk "Left on branch")
        "u r" '(undo-tree-visualize-switch-branch-right :wk "Right on branch"))

      (mark/leader-keys
        "b" '(:ignore t :wk "Buffer Bookmarks")
        "b b" '(switch-to-buffer :wk "Switch buffer")
        "b k" '(kill-this-buffer :wk "Kill this buffer")
        "b i" '(ibuffer :wk "Ibuffer")  
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer")
        "b R" '(rename-buffer :wk "Rename buffer")
        "b j" '(bookmark-jump :wk "Bookmark jump"))

      (mark/leader-keys
        "d" '(:ignore t :wk "Dired")
        "d v" '(dired :wk "Open dired")
        "d j" '(dired-jump :wk "Dired jump to current"))

      (mark/leader-keys
        "e" '(:ignore t :wk "Evaluate")    
        "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e d" '(eval-defun :wk "Evaluate defun containing or after point")
        "e e" '(eval-expression :wk "Evaluate and elisp expression")
        "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
        "e r" '(eval-region :wk "Evaluate elisp in region")) 

      (mark/leader-keys
        "g" '(:ignore t :wk "Git")    
        "g /" '(magit-displatch :wk "Magit dispatch")
        "g ." '(magit-file-displatch :wk "Magit file dispatch")
        "g b" '(magit-branch-checkout :wk "Switch branch")
        "g c" '(:ignore t :wk "Create") 
        "g c b" '(magit-branch-and-checkout :wk "Create branch and checkout")
        "g c c" '(magit-commit-create :wk "Create commit")
        "g c f" '(magit-commit-fixup :wk "Create fixup commit")
        "g C" '(magit-clone :wk "Clone repo")
        "g f" '(:ignore t :wk "Find") 
        "g f c" '(magit-show-commit :wk "Show commit")
        "g f f" '(magit-find-file :wk "Magit find file")
        "g f g" '(magit-find-git-config-file :wk "Find gitconfig file")
        "g F" '(magit-fetch :wk "Git fetch")
        "g g" '(magit-status :wk "Magit status")
        "g i" '(magit-init :wk "Initialize git repo")
        "g l" '(magit-log-buffer-file :wk "Magit buffer log")
        "g r" '(vc-revert :wk "Git revert file")
        "g s" '(magit-stage-file :wk "Git stage file")
        "g u" '(magit-stage-file :wk "Git unstage file"))

      (mark/leader-keys
        "h" '(:ignore t :wk "Help")
        "h f" '(describe-function :wk "Describe function")
        "h v" '(describe-variable :wk "Describe variable")
        "h r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload emacs config"))

      (mark/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
        "t t" '(visual-line-mode :wk "Toggle truncated lines")
        "t v" '(vterm :wk "Toggle vterm"))

      (mark/leader-keys
        "m" '(:ignore t :wk "Org")
        "m a" '(org-agenda :wk "Org agenda")
        "m e" '(org-export-dispatch :wk "Org export dispatch")
        "m i" '(org-toggle-item :wk "Org toggle item")
        "m t" '(org-todo :wk "Org todo")
        "m B" '(org-babel-tangle :wk "Org babel tangle")
        "m T" '(org-todo-list :wk "Org todo list"))

      (mark/leader-keys
        "m b" '(:ignore t :wk "Tables")
        "m b -" '(org-table-insert-hline :wk "Insert hline in table"))

      (mark/leader-keys
        "m d" '(:ignore t :wk "Date/deadline")
        "m d t" '(org-time-stamp :wk "Org time stamp")))
#+end_src

* SANE DEFAULTS
#+begin_src emacs-lisp
    (delete-selection-mode 1)    ;; You can select text and delete it by typing.
    (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
    (electric-pair-mode 1)       ;; Turns on automatic parens pairing
    ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
    ;; Otherwise, org-tempo is broken when you try to <s TAB...
    (add-hook 'org-mode-hook (lambda ()
                               (setq-local electric-pair-inhibit-predicate
                                           `(lambda (c)
                                              (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
    (global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
    (global-display-line-numbers-mode 1) ;; Display line numbers
    (global-visual-line-mode t)  ;; Enable truncated lines
    (menu-bar-mode -1)           ;; Disable the menu bar 
    (scroll-bar-mode -1)         ;; Disable the scroll bar
    (tool-bar-mode -1)           ;; Disable the tool bar

    (setq org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.
    (setq display-line-numbers-type 'relative) ;; Relative line numbers
    (global-display-line-numbers-mode)

    (setq mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling 

    (setq scroll-conservatively 10) ;; Smooth scrolling when going down
    (setq scroll-margin 8)

    (global-set-key [escape] 'keyboard-escape-quit) ;; Minibuffer Escape
    (setq make-backup-files nil) ; Stop creating ~ backup files
    (blink-cursor-mode 0) ;; Don't blink cursor
    (add-hook 'prog-mode-hook (lambda () (hs-minor-mode t))) ;; Enable folding hide show globally
#+end_src

* Set Theme
#+begin_src emacs-lisp
    (use-package gruvbox-theme
      :init
      (load-theme 'gruvbox-dark-medium t))
#+end_src

* Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src

* Fonts 
** Setting fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :font "JetBrains Mono"
                        :height 120
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.
    (add-to-list 'default-frame-alist '(font . "JetBrains Mono"))
    (setq-default line-spacing 0.12)
#+end_src

** Zooming In/Out 
You can use the bindings CTRL plus =/- for zooming in/out.  You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (global-set-key (kbd "C-+") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
    (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* Modeline
#+begin_src emacs-lisp
    (use-package doom-modeline
      :ensure t
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-height 25      ;; sets modeline height
            doom-modeline-bar-width 5    ;; sets right bar width
            doom-modeline-persp-name t   ;; adds perspective name to modeline
            doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

* DashBoard
#+begin_src emacs-lisp
    (use-package dashboard
      :ensure t 
      :init
      (setq initial-buffer-choice 'dashboard-open)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
      (setq dashboard-center-content nil) ;; set to 't' for centered content
      (setq dashboard-items '((recents . 5)
                              (agenda . 5 )
                              (bookmarks . 3)
                              (projects . 3)
                              (registers . 3)))
      :custom
      (dashboard-modify-heading-icons '((recents . "file-text")
                                        (bookmarks . "book")))
      :config
      (dashboard-setup-startup-hook))
#+end_src

* Projectile 
Projectile is a project interaction library for Emacs.
#+begin_src emacs-lisp
    (use-package projectile
      :config
      (projectile-mode 1)
      :init
      (setq projectile-switch-project-action #'projectile-dired)
      (setq projectile-project-search-path '(("~/Projects/" . 1) ("/mnt/Ext4D/Manca/Projektek/" . 1) ("/mnt/Ext4D/Manca/Game_Projects/" . 1))))
    ;; Bookmarks for non git projects
#+end_src

* Language support + Lsp
** Treesiter
#+begin_src emacs-lisp
    ;;(mapc #'treesit-install-language-grammar (mapcar #'car treesit-language-source-alist))
    (setq treesit-language-source-alist
          '((bash "https://github.com/tree-sitter/tree-sitter-bash")
            (cmake "https://github.com/uyha/tree-sitter-cmake")
            (css "https://github.com/tree-sitter/tree-sitter-css")
            (elisp "https://github.com/Wilfred/tree-sitter-elisp")
            (go "https://github.com/tree-sitter/tree-sitter-go")
            (html "https://github.com/tree-sitter/tree-sitter-html")
            (javascript "https://github.com/tree-sitter/tree-sitter-javascript" "master" "src")
            (json "https://github.com/tree-sitter/tree-sitter-json")
            (make "https://github.com/alemuller/tree-sitter-make")
            (markdown "https://github.com/ikatyang/tree-sitter-markdown")
            (python "https://github.com/tree-sitter/tree-sitter-python")
            (toml "https://github.com/tree-sitter/tree-sitter-toml")
            (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src")
            (typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src")
            (yaml "https://github.com/ikatyang/tree-sitter-yaml")
            ))
    (setq major-mode-remap-alist
          '((yaml-mode . yaml-ts-mode)
            (bash-mode . bash-ts-mode)
            (js2-mode . js-ts-mode)
            (typescript-mode . typescript-ts-mode)
            (json-mode . json-ts-mode)
            (css-mode . css-ts-mode)
            (python-mode . python-ts-mode)
            ))
    (setq treesit-font-lock-level 4) ;; To highlight everything default 3
#+end_src

** Lsp Mode
Language Server Protocol Support for Emacs
*** Setup
#+begin_src emacs-lisp
    (use-package lsp-mode
      :init
      ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
      (setq lsp-keymap-prefix "C-c l")
      (setq lsp-lens-enable nil) ;; Disable references count 
      (setq lsp-headerline-breadcrumb-enable nil) ;; Disable Header line
      :hook (;; Automatic Language Modes
             (prog-mode . lsp)
             ;; if you want which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp)
    ;; optionally
    (use-package lsp-ui 
      :commands lsp-ui-mode)
    ;; if you are ivy user
    (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
#+end_src

** Yasnippet 
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))
#+end_src

** Language modes
*** Lua mode
#+begin_src emacs-lisp
    (use-package lua-mode
      :mode "\\.lua\\'")
#+end_src

*** ORG MODE
**** Enabling Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

**** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
    (add-hook 'org-mode-hook 'org-indent-mode)
    (use-package org-bullets)
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.  Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.  Other expansions available include:
#+begin_src emacs-lisp
    (with-eval-after-load 'org
      (require 'org-tempo))
#+end_src

* Terminal
** Vterm
Vterm is a terminal emulator within Emacs.  The 'shell-file-name' setting sets the shell to be used in M-x shell, M-x term, M-x ansi-term and M-x vterm.  By default, the shell is set to 'fish' but could change it to 'bash' or 'zsh' if you prefer.
#+begin_src emacs-lisp
    (use-package vterm
      :commands (vterm))
    (setq shell-file-name "/bin/bash"
          vterm-max-scrollback 10000)
#+end_src

* Other Packages
All the package setups that don't need tweaking
** ALL THE ICONS
This is an icon set that can be used with dashboard, dired, ibuffer and other Emacs programs.
#+begin_src emacs-lisp
    (use-package all-the-icons
      :ensure t
      :if (display-graphic-p))
#+end_src

** Nerd Icons
For doom modeline
#+begin_src emacs-lisp
    (use-package nerd-icons
      :ensure t
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))
#+end_src

** Magit
Complete text-based user interface to Git
#+begin_src emacs-lisp
    (use-package magit
      :commands magit-status)
#+end_src

** Company  
Company is a text completion framework for Emacs. The name stands for “complete anything”.  Completion will start automatically after you type a few letters. Use M-n and M-p to select, <return> to complete or <tab> to complete the common part.
#+begin_src emacs-lisp
    (use-package company
      :defer 2
      :diminish
      :bind (:map company-active-map
                  ("<tab>" . company-complete-selection))
      :custom
      (company-begin-commands '(self-insert-command))
      (company-idle-delay 0.0)
      (company-minimum-prefix-length 1)
      (company-show-numbers t)
      (company-tooltip-align-annotations 't)
      (global-company-mode t))

    (use-package company-box
      :after compan
      :diminish
      :hook (company-mode . company-box-mode))
#+end_src

** Ivy (counsel)
Ivy, a generic completion mechanism for Emacs.
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
Ivy-rich allows us to add descriptions alongside the commands in M-x.
#+begin_src emacs-lisp
    (use-package counsel
      :after ivy
      :diminish
      :config (counsel-mode))

    (use-package ivy
      :bind
      ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
       ("C-x B" . ivy-switch-buffer-other-window))
      :diminish
      :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
      :config
      (ivy-mode))

    (use-package all-the-icons-ivy-rich
      :ensure t
      :init (all-the-icons-ivy-rich-mode 1))

    (use-package ivy-rich
      :after ivy
      :ensure t
      :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
      :custom
      (ivy-virtual-abbreviate 'full
                              ivy-rich-switch-buffer-align-virtual-buffer t
                              ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))
    (use-package counsel-projectile
      :config (counsel-projectile-mode))
#+end_src

** DIMINISH 
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.  With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** UndoTree
#+begin_src emacs-lisp
    (use-package undo-tree
      :init 
      (global-undo-tree-mode)
      ;; Prevent undo tree files from polluting your git repo
      (setq undo-tree-history-directory-alist '(("." . "~/.config/emacs/undo"))))
#+end_src

** RAINBOW DELIMITERS
Add colors to brackets
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.  
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :diminish
      :hook 
      ((org-mode prog-mode) . rainbow-mode))
#+end_src

** WHICH-KEY
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish
      :config
      (setq which-key-side-window-location 'bottom
            which-key-sort-order #'which-key-key-order-alpha
            which-key-sort-uppercase-first nil
            which-key-add-column-padding 1
            which-key-max-display-columns nil
            which-key-min-display-lines 6
            which-key-side-window-slot -10
            which-key-side-window-max-height 0.25
            which-key-idle-delay 0.8
            which-key-max-description-length 25
            which-key-allow-imprecise-window-fit nil
            which-key-separator " → " ))
#+end_src
* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
#+end_src
