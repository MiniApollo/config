#+Title: MiniApollo Gnu Emacs Config
#+Author: MiniApollo
#+Description: My personal emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#use-package][Use Package]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#sane-defaults][SANE DEFAULTS]]
- [[#set-theme][Set Theme]]
- [[#transparency][Transparency]]
- [[#fonts][Fonts]]
  - [[#setting-fonts][Setting fonts]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#modeline][Modeline]]
- [[#dashboard][DashBoard]]
- [[#projectile][Projectile]]
- [[#language-support--lsp][Language support + Lsp]]
  - [[#eglot][Eglot]]
  - [[#yasnippet][Yasnippet]]
  - [[#language-modes][Language modes]]
- [[#terminal][Terminal]]
  - [[#eat][Eat]]
- [[#other-packages][Other Packages]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#git][Git]]
  - [[#corfu][Corfu]]
  - [[#ivy-counsel][Ivy (counsel)]]
  - [[#vundo-with-undo-fu-session][Vundo with undo-fu-session]]
  - [[#sudo-edit][Sudo edit]]
  - [[#diminish][DIMINISH]]
  - [[#drag-stuff][Drag Stuff]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#rainbow-mode][RAINBOW MODE]]
  - [[#which-key][WHICH-KEY]]
  - [[#ws-butler][Ws-butler]]
- [[#runtime-performance][Runtime Performance]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes.  Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code). The init.el file won't update on change!
To fix this you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that efs/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
    (defun efs/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file when we save it. Credit to Emacs From Scratch for this one!"
      (when (string-equal (file-name-directory (buffer-file-name))
                          (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
          (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Use Package
I used the default package manager package.el with use-package. Alternative package managers (straight.el, elpaca, etc..) are useful if you want to
install packages from github, if you want a specific, not very popular package that is not available on elpa or melpa.
or you want UI (elpaca) and other things.

If you are interested in these other package managers, check out their github repositories or search for more package managers.
In my experience Package.el is not slow and gets the job done.

To update/upgrade packages, use the package-upgrade-all command.
With Emacs 29 use-package is now build in.
#+begin_src emacs-lisp
    (require 'package)
    (require 'use-package) ;; requires package.el and use-package so we can use it
    (setq use-package-always-ensure t) ;; always ensures that a package is installed
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")
                             ("nongnu" . "https://elpa.nongnu.org/nongnu/"))) ;; For Eat Terminal
#+end_src

** Load Evil Mode
Evil is an extensible vi/vim layer for Emacs.  Because…let’s face it.  The Vim keybindings are just plain better.
Note: To paste without copy (yank) selected text use P (shift P evil-paste-before), because default is evil-paste-after.
You can toggle evil mode with C-z (emacs-mode)
#+begin_src emacs-lisp
    (use-package evil
      :init ;; tweak evil's configuration before loading it
      (setq evil-want-keybinding nil) ;; Disable evil bindings in other modes (It's not consistent and not good)
      (setq evil-want-C-u-scroll t) ;; Set  C-u to scrool up
      (setq evil-want-C-i-jump nil) ;; Disables C-i jump
      (setq evil-undo-system 'undo-redo) ;; C-r to redo
      (setq org-return-follows-link  t) ;; Sets RETURN key in org-mode to follow links
      (evil-mode))
    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dashboard dired ibuffer magit corfu vundo))
      (evil-collection-init))
    ;; Unmap keys in 'evil-maps. If not done, (setq org-return-follows-link t) will not work
    (with-eval-after-load 'evil-maps
      (define-key evil-motion-state-map (kbd "SPC") nil)
      (define-key evil-motion-state-map (kbd "RET") nil)
      (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

** General Keybindings
General is a keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (Space + . Find file).
To search and replace start use query-replace-regexp one by one C-M-% (SPACE to replace n to skip) [[https://stackoverflow.com/questions/270930/using-emacs-to-recursively-find-and-replace-in-text-files-not-already-open][Source]]
#+begin_src emacs-lisp
    (use-package general
      :config
      (general-evil-setup)
      ;; set up 'SPC' as the global leader key
      (general-create-definer mark/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC" ;; set leader
        :global-prefix "C-SPC") ;; access leader in insert mode

      (mark/leader-keys
        "." '(find-file :wk "Find file")
        "TAB" '(comment-line :wk "Comment lines")
        "p" '(projectile-command-map :wk "Projectile command map"))

      (mark/leader-keys
        "f" '(:ignore t :wk "Find")
        "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "f e"' (sudo-edit :wk "Root edit current file")
        "f u"' (sudo-edit-find-file :wk "Root find file")
        "f r" '(counsel-recentf :wk "Recent files"))

      (mark/leader-keys
        "b" '(:ignore t :wk "Buffer Bookmarks")
        "b b" '(switch-to-buffer :wk "Switch buffer")
        "b k" '(kill-this-buffer :wk "Kill this buffer")
        "b i" '(ibuffer :wk "Ibuffer")
        "b n" '(next-buffer :wk "Next buffer")
        "b p" '(previous-buffer :wk "Previous buffer")
        "b r" '(revert-buffer :wk "Reload buffer")
        "b R" '(rename-buffer :wk "Rename buffer")
        "b j" '(bookmark-jump :wk "Bookmark jump"))

      (mark/leader-keys
        "d" '(:ignore t :wk "Dired")
        "d v" '(dired :wk "Open dired")
        "d j" '(dired-jump :wk "Dired jump to current"))

      (mark/leader-keys
        "e" '(:ignore t :wk "Evaluate")
        "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e r" '(eval-region :wk "Evaluate elisp in region"))

      (mark/leader-keys
        "g" '(:ignore t :wk "Git")
        "g g" '(magit-status :wk "Magit status"))

      (mark/leader-keys
        "h" '(:ignore t :wk "Help")
        "h c" '(company-manual-begin :wk "Company completion at point")
        "h r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
                :wk "Reload emacs config"))

      (mark/leader-keys
        "s" '(:ignore t :wk "Show")
        "s e" '(eat :wk "Show Eat")
        "s v" '(vundo :wk "Show Vundo"))

      (mark/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
        "t t" '(visual-line-mode :wk "Toggle truncated lines (wrap)")))
#+end_src

* SANE DEFAULTS
#+begin_src emacs-lisp
    (delete-selection-mode 1)    ;; You can select text and delete it by typing.
    (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
    (electric-pair-mode 1)       ;; Turns on automatic parens pairing

    (global-auto-revert-mode t)  ;; Automatically reload file and show changes if the file has changed
    (global-display-line-numbers-mode 1) ;; Display line numbers
    (global-visual-line-mode t)  ;; Enable truncated lines
    (menu-bar-mode -1)           ;; Disable the menu bar
    (scroll-bar-mode -1)         ;; Disable the scroll bar
    (tool-bar-mode -1)           ;; Disable the tool bar

    ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
    ;; Otherwise, org-tempo is broken when you try to <s TAB...
    (add-hook 'org-mode-hook (lambda ()
                               (setq-local electric-pair-inhibit-predicate
                                           `(lambda (c)
                                              (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
    (setq display-line-numbers-type 'relative) ;; Relative line numbers
    (global-display-line-numbers-mode)

    (setq mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
    (setq scroll-conservatively 10) ;; Smooth scrolling when going down with scroll margin
    (setq scroll-margin 8)

    (setq make-backup-files nil) ; Stop creating ~ backup files
    ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
    (setq custom-file (locate-user-emacs-file "custom-vars.el"))
    (load custom-file 'noerror 'nomessage)

    (global-set-key [escape] 'keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
    (blink-cursor-mode 0) ;; Don't blink cursor
    (add-hook 'prog-mode-hook (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally

    (setq org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.
    (setq-default tab-width 4)
#+end_src

* Set Theme
Set gruvbox theme if you want some themes to try out doom-themes
#+begin_src emacs-lisp
    (use-package gruvbox-theme
      :init
      (load-theme 'gruvbox-dark-medium t)) ;; We need to add t to trust this package
#+end_src

* Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 90)) ; For all new frames henceforth
#+end_src

* Fonts
** Setting fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :font "JetBrains Mono" ;; Set your favorite type of font or download JetBrains Mono
                        :height 120
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.
    (add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
    (setq-default line-spacing 0.12)
#+end_src

** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (global-set-key (kbd "C-+") 'text-scale-increase)
    (global-set-key (kbd "C--") 'text-scale-decrease)
    (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
    (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* Modeline
Replace the default modeline with a pretier more useful.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :config
      (setq doom-modeline-height 25      ;; sets modeline height
            doom-modeline-bar-width 5    ;; sets right bar width
            doom-modeline-persp-name t   ;; adds perspective name to modeline
            doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

* DashBoard
#+begin_src emacs-lisp
    (use-package dashboard
      :init
      (setq initial-buffer-choice 'dashboard-open)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
      (setq dashboard-center-content nil) ;; set to 't' for centered content
      (setq dashboard-items '((recents . 5)
                              (agenda . 5 )
                              (bookmarks . 3)
                              (projects . 3)
                              (registers . 3)))
      :custom
      (dashboard-modify-heading-icons '((recents . "file-text")
                                        (bookmarks . "book")))
      :config
      (dashboard-setup-startup-hook))
#+end_src

* Projectile
Projectile is a project interaction library for Emacs.
#+begin_src emacs-lisp
    (use-package projectile
      :config
      (projectile-mode 1)
      :init
      (setq projectile-switch-project-action #'projectile-dired)
      (setq projectile-project-search-path '(("~/Projects/" . 1) ("/mnt/Ext4D/Manca/Projektek/" . 1) ("/mnt/Ext4D/Manca/Game_Projects/" . 1))))
    ;; Use Bookmarks for non git projects
#+end_src

* Language support + Lsp
** Eglot
Language Server Protocol Support for Emacs. The build in is now Eglot (with emacs 29).
Eglot is fast and minimal, but requires manual setup for LSP servers (downloading).
For more [[https://www.gnu.org/software/emacs/manual/html_mono/eglot.html][information how to use.]] One altertative to Eglot is Lsp-mode, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] page for more information.

Eglot is easy to set up, but the only difficult part is downloading and setting up the lsp servers.
After that just add-hook with eglot-ensure to automatically start eglot for a given file type. And you are done.

As an example to use C, C++ you need to install clangd(or ccls) and uncomment the following lines. Now the language server will start automatically when opening any c,c++ file.
Another harder example is Lua. Download lua-language-server from their git repository, add it to your PATH (lua-language-server/bin, make it executable lua-language-server)
and add a hook (or use a package manager).

If you can use a package manager just install it and add a hook
#+begin_src emacs-lisp
    ;; Automatically start eglot for a given file type.
    ;; (add-hook 'c-mode-hook 'eglot-ensure)
    ;; (add-hook 'c++-mode-hook 'eglot-ensure)
    ;; (add-hook 'lua-mode-hook 'eglot-ensure)
#+end_src

** Yasnippet
YASnippet is a template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it write out the full keyword (or use autocompletion) and press Tab
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))
#+end_src

** Language modes
Its not required for every language like C,C++,C#,Java,Javascript etc.. to download language mode packages, but for more specific languages it is necessary for syntax highlighting.
If you want to use TreeSitter. Check out this [[https://www.masteringemacs.org/article/how-to-get-started-tree-sitter][website]].
Currently its tedious to use Treesitter because emacs has not yet fully migrated to it.
*** Lua mode
Example how to setup a language mode (if you don't want it feel free to delete it)
# #+begin_src emacs-lisp
#     (use-package lua-mode
#       :mode "\\.lua\\'") ;; Only start in a lua file
# #+end_src
*** GDScript mode
#+begin_src emacs-lisp
    (use-package gdscript-mode
      :mode "\\.gd\\'")
    (defun lsp--gdscript-ignore-errors (original-function &rest args)
      "Ignore the error message resulting from Godot not replying to the `JSONRPC' request."
      (if (string-equal major-mode "gdscript-mode")
          (let ((json-data (nth 0 args)))
            (if (and (string= (gethash "jsonrpc" json-data "") "2.0")
                     (not (gethash "id" json-data nil))
                     (not (gethash "method" json-data nil)))
                nil ; (message "Method not found")
              (apply original-function args)))
        (apply original-function args)))
    ;; Runs the function `lsp--gdscript-ignore-errors` around `lsp--get-message-type` to suppress unknown notification errors.
    (advice-add #'lsp--get-message-type :around #'lsp--gdscript-ignore-errors)
#+end_src

*** ORG MODE
Org mode is one of the things that emacs is loved for.
Once you've used it for a bit, you'll understand why people love it. Even reading about it can be inspiring!
For example, this document is effectively the source code and descriptions bound into the one document,
much like the literate programming ideas that Donald Knuth made famous.
**** Useful tweaks
#+begin_src emacs-lisp
    (add-hook 'org-mode-hook 'org-indent-mode) ;; Indent text
#+end_src

**** Enabling Table of Contents
#+begin_src emacs-lisp
	(use-package toc-org
	  :commands toc-org-enable
	  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

**** Enabling Org Bullets
Org-bullets gives us attractive bullets rather than asterisks.
#+begin_src emacs-lisp
    (use-package org-bullets
      :hook (org-mode . org-bullets-mode)
      :after org)
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (with-eval-after-load 'org
      (require 'org-tempo))
#+end_src

* Terminal
** Eat
Eat(Emulate A Terminal) is a terminal emulator within Emacs.
Its more portable and less overhead for users over like vterm or eshell.
We setup eat with eshell if you want to use bash, zsh etc.. Check out their git [[https://codeberg.org/akib/emacs-eat][repository]] how to do it.
#+begin_src emacs-lisp
    (use-package eat
      :hook ('eshell-load-hook #'eat-eshell-mode))
#+end_src

* Other Packages
All the package setups that don't need much tweaking
** Nerd Icons
For icons and more helpful ui.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts.

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Git
*** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :commands magit-status)
#+end_src

*** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((magit-pre-refresh-hook . diff-hl-magit-pre-refresh)
             (magit-post-refresh-hook . diff-hl-magit-post-refresh))
      :init (global-diff-hl-mode))
#+end_src

** Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
For more configuration options check out their [[https://github.com/minad/corfu][git repository]]
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)                 ;; Enable auto completion
      (corfu-auto-prefix 2)          ;; Minimum length of prefix for auto completion.
      ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
      ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
      ;; (corfu-preview-current nil)    ;; Disable current candidate preview
      ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
      ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches

      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      :init
      (global-corfu-mode))

    ;; A few more useful configurations...
    (use-package emacs
      :init
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (setq tab-always-indent 'complete))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

#+end_src

** Ivy (counsel)
Ivy, a generic completion mechanism for Emacs.
Counsel, a collection of Ivy-enhanced versions of common Emacs commands.
Ivy-rich allows us to add descriptions alongside the commands in M-x.
#+begin_src emacs-lisp
    (use-package counsel
      :after ivy
      :diminish
      :config (counsel-mode))

    (use-package ivy
      :bind
      ;; ivy-resume resumes the last Ivy-based completion.
      (("C-c C-r" . ivy-resume)
       ("C-x B" . ivy-switch-buffer-other-window))
      :diminish
      :custom
      (setq ivy-use-virtual-buffers t)
      (setq ivy-count-format "(%d/%d) ")
      (setq enable-recursive-minibuffers t)
      :config
      (ivy-mode))

    (use-package nerd-icons-ivy-rich
      :init
      (nerd-icons-ivy-rich-mode 1)
      (ivy-rich-mode 1))

    (use-package ivy-rich
      :after ivy
      :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
      :custom
      (ivy-virtual-abbreviate 'full
                              ivy-rich-switch-buffer-align-virtual-buffer t
                              ivy-rich-path-style 'abbrev)
      :config
      (ivy-set-display-transformer 'ivy-switch-buffer
                                   'ivy-rich-switch-buffer-transformer))
    (use-package counsel-projectile
      :config (counsel-projectile-mode))
#+end_src

** Vundo with undo-fu-session
Visualizes the undo history with more emacs native features (alternative undotree).
#+begin_src emacs-lisp
    (use-package vundo)
    (use-package undo-fu-session
      :init
      (undo-fu-session-global-mode)

      :custom
      (undo-fu-session-file-limit 100000))
#+end_src

** Sudo edit
Utilities for opening files with root privileges (also works with doas).
#+begin_src emacs-lisp
        (use-package sudo-edit
          :config (setq sudo-edit-local-method "doas")) ;; To use doas
#+end_src

** DIMINISH
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** Drag Stuff
Makes it possible to move selected text, regions, lines.
#+begin_src emacs-lisp
    (use-package drag-stuff
      :init
      (drag-stuff-global-mode 1)
      (drag-stuff-define-keys))
#+end_src

** Rainbow Delimiters
Add colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** RAINBOW MODE
Display the actual color as a background for any hex color value (ex. #ffffff).  The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :diminish
      :hook
      ((org-mode prog-mode) . rainbow-mode))
#+end_src

** WHICH-KEY
Which-key is a helper utility for keychords (which key to press)
#+begin_src emacs-lisp
    (use-package which-key
      :init
      (which-key-mode 1)
      :diminish
      :config
      (setq which-key-side-window-location 'bottom
            which-key-sort-order #'which-key-key-order-alpha
            which-key-sort-uppercase-first nil
            which-key-add-column-padding 1
            which-key-max-display-columns nil
            which-key-min-display-lines 6
            which-key-side-window-slot -10
            which-key-side-window-max-height 0.25
            which-key-idle-delay 0.8
            which-key-max-description-length 25
            which-key-allow-imprecise-window-fit nil
            which-key-separator " → " ))
#+end_src

** Ws-butler
Removes whitespace from the ends of lines.
#+begin_src emacs-lisp
    (use-package ws-butler
      :hook (prog-mode . ws-butler-mode))
#+end_src

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time. We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
