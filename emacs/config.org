#+Title: MiniApollo's Gnu Emacs Config
#+Author: MiniApollo
#+Description: My personal emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes
#+Startup: showeverything
#+Options: toc:2

* Table Of Contents :toc:
- [[#important-to-load-first][Important to load first]]
  - [[#startup-performance][Startup Performance]]
  - [[#auto-tangle-configuration-file][Auto-tangle Configuration file]]
  - [[#startup-time][Startup time]]
  - [[#use-package][Use Package]]
  - [[#evil-mode][Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#good-defaults][Good Defaults]]
- [[#appearance][Appearance]]
  - [[#set-theme][Set Theme]]
  - [[#transparency][Transparency]]
  - [[#fonts][Fonts]]
  - [[#modeline][Modeline]]
- [[#development][Development]]
  - [[#consult-dir][Consult-dir]]
  - [[#lsp-mode][LSP Mode]]
  - [[#sideline-flymake][Sideline-flymake]]
  - [[#yasnippet][Yasnippet]]
  - [[#language-modes][Language modes]]
  - [[#terminal][Terminal]]
- [[#other-packages][Other Packages]]
  - [[#nerd-icons][Nerd Icons]]
  - [[#git][Git]]
  - [[#corfu][Corfu]]
  - [[#cape][Cape]]
  - [[#orderless][Orderless]]
  - [[#vertico-and-marginalia][Vertico and Marginalia]]
  - [[#consult][Consult]]
  - [[#undotree][UndoTree]]
  - [[#sudo-edit][Sudo edit]]
  - [[#evil-mc][Evil-mc]]
  - [[#diminish][Diminish]]
  - [[#rainbow-delimiters][Rainbow Delimiters]]
  - [[#rainbow-mode][Rainbow Mode]]
  - [[#which-key][Which-key]]
  - [[#ws-butler][Ws-butler]]
- [[#runtime-performance][Runtime Performance]]

* Important to load first
** Startup Performance
Make startup faster by reducing the frequency of garbage collection. This will be set back when startup finishes.
#+begin_src emacs-lisp
    ;; The default is 800 kilobytes. Measured in bytes.
    (setq gc-cons-threshold (* 50 1000 1000))
#+end_src

** Auto-tangle Configuration file
Auto-Tangle Org configuration file for better startup times.
If you want to use this don't forget to add this to the top of the org document (#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes)

*Remember*, if this code can't be loaded (errors before this code), the init.el file won't update on change!
To fix this, you need to find this file (C-x C-f), fix the error and press C-c C-v t to tangle it manually.

This snippet adds a hook to org-mode buffers so that mark/org-babel-tangle-config gets executed each time such a buffer gets saved.
This function checks to see if the file being saved is the Emacs.org file you’re looking at right now, and if so,
automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
    (defun mark/org-babel-tangle-config ()
      "Automatically tangle our Emacs.org config file and refresh package-quickstart when we save it. Credit to Emacs From Scratch for this one!"
      (interactive)
      (when (string-equal (file-name-directory (buffer-file-name))
    					  (expand-file-name user-emacs-directory))
        ;; Dynamic scoping to the rescue
        (let ((org-confirm-babel-evaluate nil))
    	  (org-babel-tangle)
    	  (package-quickstart-refresh)
    	  )
        ))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'mark/org-babel-tangle-config)))
#+end_src

** Startup time
#+begin_src emacs-lisp
    (defun mark/display-startup-time ()
      (message "Emacs loaded in %s with %d garbage collections."
               (format "%.2f seconds"
                       (float-time
    					(time-subtract after-init-time before-init-time)))
               gcs-done))

    (add-hook 'emacs-startup-hook #'mark/display-startup-time)
#+end_src

** Use Package
We use the default package manager package.el with use-package. Alternative package managers (straight.el, elpaca, etc.) are useful if you want to
install packages from git repositories, if you want a specific, not very popular package that is not available on elpa or melpa,
or you want UI (elpaca) and other things.

If you are interested in these other package managers, check out their git repositories or search for more package managers.
In my experience Package.el is not slow and gets the job done.

To update/upgrade packages, use the package-upgrade-all command.
Check out the use-package [[https://www.gnu.org/software/emacs/manual/use-package.html][documentation]] to see how to use it.
With Emacs 29 use-package is now built-in.
#+begin_src emacs-lisp
    (require 'use-package-ensure) ;; Load use-package-always-ensure
    (setq use-package-always-ensure t) ;; Always ensures that a package is installed
    (setq package-archives '(("melpa" . "https://melpa.org/packages/") ;; Sets default package repositories
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))
    (setq package-quickstart t) ;; For blazingly fast startup times, this line makes startup miles faster
#+end_src

** Evil Mode
An extensible vi/vim layer for Emacs. Because…let’s face it. The Vim keybindings are just plain better.
Notes:
- You can toggle evil mode with C-z.
- To paste without copy (yank) select the text and use P (shift-p).
#+begin_src emacs-lisp
    (use-package evil
      :init ;; Execute code Before a package is loaded
      (evil-mode)
      :custom ;; Customization of package custom variables
      (evil-want-keybinding nil)    ;; Disable evil bindings in other modes (It's not consistent and not good)
      (evil-want-C-u-scroll t)      ;; Set C-u to scroll up
      (evil-want-C-i-jump nil)      ;; Disables C-i jump
      (evil-undo-system 'undo-tree) ;; C-r to redo
      (org-return-follows-link t)   ;; Sets RETURN key in org-mode to follow links
      ;; Unmap keys in 'evil-maps. If not done, org-return-follows-link will not work
      :bind (:map evil-motion-state-map
                  ("SPC" . nil)
                  ("RET" . nil)
                  ("TAB" . nil))
      ;;   :config
      ;;   ;; Define the leader key as Space
      ;;   (evil-set-leader '(normal visual motion) (kbd "SPC"))
      ;;   (evil-set-leader nil (kbd "C-SPC"))

      ;;   (evil-define-key '(normal visual motion) 'global
      ;;     (kbd "<leader>.") 'find-file
      ;;     (kbd "<leader>TAB") 'comment-line

      ;;     (kbd "<leader>sc") (lambda () (interactive) (find-file "~/.config/emacs/config.org"))
      ;;     (kbd "<leader>se") 'sudo-edit
      ;;     (kbd "<leader>su") 'sudo-edit-find-file
      ;;     (kbd "<leader>sr") 'consult-recent-file
      ;;     (kbd "<leader>sf") 'consult-fd
      ;;     (kbd "<leader>sg") 'consult-ripgrep
      ;;     (kbd "<leader>sl") 'consult-line
      ;;     (kbd "<leader>si") 'consult-imenu

      ;;     (kbd "<leader>ds") 'consult-buffer
      ;;     (kbd "<leader>dk") 'kill-current-buffer
      ;;     (kbd "<leader>di") 'ibuffer
      ;;     (kbd "<leader>dn") 'next-buffer
      ;;     (kbd "<leader>dp") 'previous-buffer
      ;;     (kbd "<leader>dr") 'revert-buffer
      ;;     (kbd "<leader>db") 'bookmark-jump
      ;;     (kbd "<leader>dv") 'dired
      ;;     (kbd "<leader>dj") 'dired-jump
      
      ;;     (kbd "<leader>ee") 'lsp-restart-workspace
      ;;     (kbd "<leader>ed") 'eldoc-doc-buffer
      ;;     (kbd "<leader>ef") 'lsp-format-buffer
      ;;     (kbd "<leader>el") 'consult-flymake
      ;;     (kbd "<leader>er") 'lsp-rename
      ;;     (kbd "<leader>ei") 'lsp-find-definition
      ;;     (kbd "<leader>evb") 'eval-buffer
      ;;     (kbd "<leader>evr") 'eval-region

      ;;     (kbd "<leader>gt") 'magit-status

      ;;     (kbd "<leader>hq") 'save-buffers-kill-emacs ;; Quit Emacs and Daemon
      ;;     (kbd "<leader>hr") (lambda () (interactive) (load-file "~/.config/emacs/init.el")) ;; Reload Emacs config

      ;;     (kbd "<leader>vm") 'multi-vterm
      ;;     (kbd "<leader>vn") 'multi-vterm-next 
      ;;     (kbd "<leader>vp") 'multi-vterm-prev
      ;;     (kbd "<leader>vd") 'multi-vterm-dedicated-toggle

      ;;     (kbd "<leader>q") 'flymake-show-buffer-diagnostics
      ;;     (kbd "<leader>u") 'undo-tree-visualize

      ;;     (kbd "<leader>tt") 'visual-line-mode
      ;;     (kbd "<leader>tm") 'evil-mc-mode
      ;;     )
      )

    (use-package evil-collection
      :after evil
      :config
      ;; Setting where to use evil-collection
      (setq evil-collection-mode-list '(dired ibuffer magit corfu vertico consult vterm))
      (evil-collection-init))
#+end_src

** General Keybindings
A keybinding framework to set keybindings easily.
The Leader key is what you will press when you want to access your keybindings (SPC + . Find file).
To search and replace, use query-replace-regexp to replace one by one C-M-% (SPC to replace n to skip).
#+begin_src emacs-lisp
    (use-package general
      :after evil
      :config
      (general-evil-setup)
      ;; Set up 'SPC' as the leader key
      (general-create-definer mark/leader-keys
        :states '(normal insert visual motion emacs)
        :keymaps 'override
        :prefix "SPC"           ;; Set leader key
        :global-prefix "C-SPC"  ;; Set global leader key
        )
      (mark/leader-keys
    	"." '(find-file :wk "Find file")
    	"TAB" '(comment-line :wk "Comment lines")
    	"q" '(flymake-show-buffer-diagnostics :wk "Flymake buffer diagnostic")
    	"u" '(undo-tree-visualize :wk "Undotree"))

      (mark/leader-keys
    	"p" '(:ignore t :wk "Project")
    	"p f"' (project-find-file :wk "Project Find file")
    	"p d"' (project-dired :wk "Project Dired")
    	)

      (mark/leader-keys
    	"s" '(:ignore t :wk "Find")
    	"s c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
    	"s e"' (sudo-edit :wk "Root edit current file")
    	"s u"' (sudo-edit-find-file :wk "Root find file")
    	"s r" '(consult-recent-file :wk "Recent files")
    	"s f" '(consult-fd :wk "Fd search for files")
    	"s g" '(consult-ripgrep :wk "Ripgrep search in files")
    	"s l" '(consult-line :wk "Find line")
    	"s i" '(consult-imenu :wk "Imenu buffer locations")
    	"s p" '(projectile-discover-projects-in-search-path :wk "Projectile Discover Projects"))

      (mark/leader-keys
    	"d" '(:ignore t :wk "Buffer Bookmarks")
    	"d s" '(consult-buffer :wk "Switch buffer")
    	"d k" '(kill-current-buffer :wk "Kill this buffer")
    	"d i" '(ibuffer :wk "Ibuffer")
    	"d n" '(next-buffer :wk "Next buffer")
    	"d p" '(previous-buffer :wk "Previous buffer")
    	"d r" '(revert-buffer :wk "Reload buffer")
    	"d a" '(consult-dir :wk "Consult dir")
    	"d v" '(dired :wk "Open dired")
    	"d j" '(dired-jump :wk "Dired jump to current"))

      (mark/leader-keys
    	"d" '(:ignore t :wk "Dired")
    	"d v" '(dired :wk "Open dired")
    	"d j" '(dired-jump :wk "Dired jump to current"))

      (mark/leader-keys
    	"e" '(:ignore t :wk "Languages")
    	"e e" '(lsp-restart-workspace :wk "LSP Reconnect")
    	"e d" '(eldoc-doc-buffer :wk "Eldoc Buffer")
    	"e f" '(lsp-format-buffer :wk "LSP Format")
    	"e l" '(consult-flymake :wk "Consult Flymake")
    	"e r" '(lsp-rename :wk "Eglot Rename")
    	"e i" '(lsp-find-definition :wk "Find defintion")
    	"e v" '(:ignore t :wk "Elisp")
    	"e v b" '(eval-buffer :wk "Evaluate elisp in buffer")
    	"e v r" '(eval-region :wk "Evaluate elisp in region"))

      (mark/leader-keys
    	"g" '(:ignore t :wk "Git")
    	"g s" '(magit-status :wk "Magit status"))

      (mark/leader-keys
    	"h" '(:ignore t :wk "Help") ;; To get more help use C-h commands (describe variable, function, etc.)
    	"h q" '(save-buffers-kill-emacs :wk "Quit Emacs and Daemon")
    	"h r" '((lambda () (interactive)
                  (load-file "~/.config/emacs/init.el"))
    			:wk "Reload Emacs config"))

      (mark/leader-keys
    	"v" '(:ignore t :wk "Vterm")
    	"v m" '(multi-vterm :wk "New Multi Vterm")
    	"v n" '(multi-vterm-next :wk "Vterm next")
    	"v p" '(multi-vterm-prev :wk "Vterm previus")
    	"v d" '(multi-vterm-dedicated-toggle :wk "Toggle dedicated Vterm"))

      (mark/leader-keys
    	"t" '(:ignore t :wk "Toggle")
    	"t t" '(visual-line-mode :wk "Truncated lines (wrap)")
    	"t l" '(display-line-numbers-mode :wk "Line numbers")
    	"t m" '(evil-mc-mode :wk "Evil mc mode")
    	))
    (use-package emacs
      ;; Fix general.el leader key not working instantly in messages buffer with evil mode
      :ghook ('after-init-hook
              (lambda (&rest _)
                (when-let ((messages-buffer (get-buffer "*Messages*")))
                  (with-current-buffer messages-buffer
                    (evil-normalize-keymaps))))
              nil nil t)
      )
#+end_src

** Good Defaults
#+begin_src emacs-lisp
    (use-package emacs
      :custom
      (menu-bar-mode nil)         ;; Disable the menu bar
      (scroll-bar-mode nil)       ;; Disable the scroll bar
      (tool-bar-mode nil)         ;; Disable the tool bar
      (inhibit-startup-screen t)  ;; Disable welcome screen

      (delete-selection-mode t)   ;; Select text and delete it by typing.
      (electric-indent-mode nil)  ;; Turn off the weird indenting that Emacs does by default.
      (electric-pair-mode t)      ;; Turns on automatic parens pairing

      (blink-cursor-mode nil)     ;; Don't blink cursor
      (global-auto-revert-mode t) ;; Automatically reload file and show changes if the file has changed

      (dired-kill-when-opening-new-dired-buffer t) ;; Dired don't create new buffer
      (recentf-mode t) ;; Enable recent file mode

      (display-line-numbers-type 'relative) ;; Relative line numbers
      (global-display-line-numbers-mode t)  ;; Display line numbers
      (global-visual-line-mode t)           ;; Enable truncated lines

      (mouse-wheel-progressive-speed nil) ;; Disable progressive speed when scrolling
      (scroll-conservatively 10) ;; Smooth scrolling when going down with scroll margin
      (scroll-margin 8)

      (tab-width 4)
      (sgml-basic-offset 4) ;; Set Html mode indentation to 4

      (make-backup-files nil) ;; Stop creating ~ backup files
      (auto-save-default nil) ;; Stop creating # auto save files
      :hook
      (prog-mode . (lambda () (hs-minor-mode t))) ;; Enable folding hide/show globally
      :config
      ;; Move customization variables to a separate file and load it, avoid filling up init.el with unnecessary variables
      (setq custom-file (locate-user-emacs-file "custom-vars.el"))
      (load custom-file 'noerror 'nomessage)
      :bind (
             ([escape] . keyboard-escape-quit) ;; Makes Escape quit prompts (Minibuffer Escape)
             ("C-g" . evil-normal-state)
             ))
#+end_src

* Appearance
** Set Theme
Set gruvbox theme, if you want some themes try out doom-themes.
Use consult-theme to easily try out themes (Epilepsy Warning).
#+begin_src emacs-lisp
    (use-package gruvbox-theme
      :config
      (setq gruvbox-bold-constructs t)
      (load-theme 'gruvbox-dark-medium t)) ;; We need to add t to trust this package
#+end_src

** Transparency
With Emacs version 29, true transparency has been added.
#+begin_src emacs-lisp
    (add-to-list 'default-frame-alist '(alpha-background . 90)) ;; For all new frames henceforth
#+end_src
** Fonts
*** Setting fonts
#+begin_src emacs-lisp
    (set-face-attribute 'default nil
                        :font "JetBrains Mono" ;; Set your favorite type of font or download JetBrains Mono
                        :height 120
                        :weight 'medium)
    ;; This sets the default font on all graphical frames created after restarting Emacs.
    ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
    ;; are not right unless I also add this method of setting the default font.

    (add-to-list 'default-frame-alist '(font . "JetBrains Mono")) ;; Set your favorite font
    (setq-default line-spacing 0.12)
#+end_src

*** Zooming In/Out
You can use the bindings C-+ C-- for zooming in/out. You can also use CTRL plus the mouse wheel for zooming in/out.
#+begin_src emacs-lisp
    (use-package emacs
      :bind
      ("C-+" . text-scale-increase)
      ("C--" . text-scale-decrease)
      ("<C-wheel-up>" . text-scale-increase)
      ("<C-wheel-down>" . text-scale-decrease))
#+end_src

** Modeline
Replace the default modeline with a prettier more useful.
#+begin_src emacs-lisp
    (use-package doom-modeline
      :init (doom-modeline-mode 1)
      :custom
      (doom-modeline-height 25)     ;; Sets modeline height
      (doom-modeline-bar-width 5)   ;; Sets right bar width
      (doom-modeline-persp-name t)  ;; Adds perspective name to modeline
      (doom-modeline-persp-icon t)) ;; Adds folder icon next to persp name
#+end_src

* Development
** Consult-dir
#+begin_src emacs-lisp
    (use-package consult-dir
      :defer
      :custom 
      (consult-dir-default-command #'consult-dir-dired)
      :config 
      ;; A function that returns a list of directories
      (defun consult-dir--work-dirs ()
        "Return list of work dirs."
        (append
         (split-string (shell-command-to-string "find ~/.config -maxdepth 1 -type d") "\n" t)
         (split-string (shell-command-to-string "find /mnt/Ext4D/Mark/Projektek/ /mnt/Ext4D/Mark/Projektek/Desktop/Gyakorlas/ -mindepth 2 -maxdepth 2 -type d") "\n" t)
         )
        )

      ;; A consult source that calls this function
      (defvar consult-dir--source-work
        `(:name     "Work Directories"
                    :narrow   ?w
                    :category file
                    :face     consult-file
                    :history  file-name-history
                    :enabled  ,(lambda () (executable-find "find"))
                    :items    ,#'consult-dir--work-dirs)
        "Work directory source for `consult-dir'.")

      ;; Adding to the list of consult-dir sources
      (add-to-list 'consult-dir-sources 'consult-dir--source-work t))
#+end_src

** LSP Mode
Language Server Protocol Support for Emacs.
If a project is in an another project add the project with this command: projectile-add-known-project
https://github.com/neovim/nvim-lspconfig/blob/master/doc/configs.md
#+begin_src emacs-lisp
    (use-package lsp-mode
      :custom
      (lsp-completion-provider :none) ;; we use Corfu!
      ;; Disable unneeded features
      (lsp-lens-enable nil) ;; Disable references count
      (lsp-headerline-breadcrumb-enable nil) ;; Disable Header line
      (lsp-ui-sideline-show-code-actions nil) ;; Hide right side code actions
      (lsp-ui-sideline-show-hover nil) ;; Hide right hover symbols
      (lsp-modeline-code-actions-enable nil) ;; Disable modeline code actions
      (lsp-eldoc-enable-hover nil) ;; Disable eldoc (echo area info)
      (lsp-modeline-diagnostics-enable nil) ;; Disable Modeline diagnostic status
      (lsp-signature-auto-activate nil) ;; Disable Signature help you could manually request them via `lsp-signature-activate`
      (lsp-completion-show-detail nil) ;; Disable Completion item detail
      :init
      (defun my/lsp-mode-setup-completion ()
        (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
              '(flex))) ;; Configure flex (corfu)
      :hook (;; Automatic Language Modes
             ((c-ts-mode c++-ts-mode
                    csharp-mode java-ts-mode
                    html-ts-mode css-ts-mode
                    js-ts-mode typescript-ts-mode
                    php-mode cmake-ts-mode
                    go-ts-mode rust-ts-mode
                    gdscript-mode glsl-mode) . lsp)
             (lsp-completion-mode . my/lsp-mode-setup-completion) ;; corfu completion
             ;; if you want which-key integration
             (lsp-mode . lsp-enable-which-key-integration))
      :commands lsp)
    ;; optionally
    (use-package lsp-ui
      :commands lsp-ui-mode)
#+end_src

** Sideline-flymake
Show flymake errors with sideline
#+begin_src emacs-lisp
    (use-package sideline-flymake
      :hook (flymake-mode . sideline-mode)
      :custom
      (sideline-flymake-display-mode 'line) ;; show errors on the current line
      (sideline-backends-right '(sideline-flymake)))
#+end_src

** Yasnippet
A template system for Emacs. And yasnippet-snippets is a snippet collection package.
To use it write out the full keyword (or use autocompletion) and press Tab.
#+begin_src emacs-lisp
    (use-package yasnippet-snippets
      :hook (prog-mode . yas-minor-mode))

    (defun mark/corfu-yas-tab-handler ()
      "Prioritize corfu over yasnippet when yasnippet is active"
      (interactive)
      ;; There is no direct way to get if corfu is currently displayed so we watch the completion index
      (if (> corfu--index -1)
          (corfu-complete)
        (yas-next-field-or-maybe-expand)
        )
      )
    (use-package emacs
      :after (yasnippet corfu)
      :bind
      (:map yas-keymap
            ("TAB" . mark/corfu-yas-tab-handler))
      )
#+end_src

** Language modes
*** Tree-sitter
Automatically install and use tree-sitter major modes in Emacs 29+. If the tree-sitter version can’t be used, fall back to the original major mode.
#+begin_src emacs-lisp
    ;; M-x treesit-auto-install-all
    ;; Install all (or a selected subset) of the maintained and compatible grammars.
    (use-package treesit-auto
      :custom
      (treesit-auto-install 'prompt)
      (c-ts-mode-indent-offset 4) ;; Fix weird indentation in c-ts (C, C++)
      (go-ts-mode-indent-offset 4) ;; Fix weird indentation in go-ts
      (treesit-font-lock-level 4)
      :config
      ;; Remove treesitter modes, go-ts-mode not working currently
      ;; glsl-ts-mode don't work because of a rewrite in glsl-mode
      ;; https://github.com/jimhourihan/glsl-mode/commit/c5f2c2e7edf8a647eda74abe2cdf73fa6f62ebd2
      (setq treesit-auto-langs '(bash c cmake cpp css dockerfile go gomod html
                                      java javascript json lua make markdown python
                                      rust sql toml tsx typescript yaml))
      ;; Important: Delete before 'treesit-auto-add-to-auto-mode-alist'
      (treesit-auto-add-to-auto-mode-alist 'all)
      (global-treesit-auto-mode))

    (use-package cmake-ts-mode
      :ensure nil
      :mode ("CMakeLists\\.txt\\'" "\\.cmake\\'"))
#+end_src

*** Org Mode
Org mode is one of the things that emacs is loved for.
Once you've used it for a bit, you'll understand why people love
it. Even reading about it can be inspiring!
For example, this document is effectively the source code and descriptions bound into the one document,
much like the literate programming ideas that Donald Knuth made famous.
#+begin_src emacs-lisp
    (use-package org
      :ensure nil
      :custom
      (org-edit-src-content-indentation 4) ;; Set src block automatic indent to 4 instead of 2.
      :hook
      (org-mode . org-indent-mode) ;; Indent text
      ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
      ;; Otherwise, org-tempo is broken when you try to <s TAB...
      (org-mode . (lambda ()
                    (setq-local electric-pair-inhibit-predicate
                                `(lambda (c)
                                   (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
      )
#+end_src

**** Table of Contents
#+begin_src emacs-lisp
    (use-package toc-org
      :commands toc-org-enable
      :hook (org-mode . toc-org-mode))
#+end_src

**** Org Superstar
Prettify headings and plain lists in Org mode. Modern version of org-bullets.
#+begin_src emacs-lisp
    (use-package org-superstar
      :after org
      :hook (org-mode . org-superstar-mode))
#+end_src

**** Source Code Block Tag Expansion
Org-tempo is not a separate package but a module within org that can be enabled.
Org-tempo allows for '<s' followed by TAB to expand to a begin_src tag.
#+begin_src emacs-lisp
    (use-package org-tempo
      :ensure nil
      :after org)
#+end_src
** Terminal
*** VTerm
Fully-fledged terminal emulator inside GNU Emacs.
Fast, POSIX compliant shell, handles UIs well.
Eat don't support C-arrow key movement and don't work well with evil mode.
#+begin_src emacs-lisp
    (use-package vterm
      :defer
      :custom
      (vterm-max-scrollback 5000))
#+end_src
*** Multi-vterm
Managing multiple vterm buffers in Emacs
#+begin_src emacs-lisp
    (use-package multi-vterm
      :after vterm)
#+end_src

* Other Packages
All the package setups that don't need much tweaking.
** Nerd Icons
For icons and more helpful UI.
This is an icon set that can be used with dired, ibuffer and other Emacs programs.

Don't forget to use nerd-icons-install-fonts.

We use Nerd icons because it has more, better icons and all-the-icons only supports GUI.
While nerd-icons supports both GUI and TUI.
#+begin_src emacs-lisp
    (use-package nerd-icons
      :if (display-graphic-p))

    (use-package nerd-icons-dired
      :hook (dired-mode . (lambda () (nerd-icons-dired-mode t))))

    (use-package nerd-icons-ibuffer
      :hook (ibuffer-mode . nerd-icons-ibuffer-mode))
#+end_src

** Git
*** Magit
Complete text-based user interface to Git.
#+begin_src emacs-lisp
    (use-package magit
      :defer
      :custom (magit-diff-refine-hunk (quote all))
      :config (define-key transient-map (kbd "<escape>") 'transient-quit-one)
      )
#+end_src

*** Diff-hl
Highlights uncommitted changes on the left side of the window (area also known as the "gutter"), allows you to jump between and revert them selectively.
#+begin_src emacs-lisp
    (use-package diff-hl
      :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
             (magit-pre-refresh  . diff-hl-magit-pre-refresh)
             (magit-post-refresh . diff-hl-magit-post-refresh)))
#+end_src

** Corfu
Enhances in-buffer completion with a small completion popup.
Corfu is a small package, which relies on the Emacs completion facilities and concentrates on providing a polished completion.
For more configuration options check out their [[https://github.com/minad/corfu][git repository]].
Notes:
- To enter Orderless field separator, use M-SPC.
#+begin_src emacs-lisp
    (use-package corfu
      ;; Optional customizations
      :custom
      (corfu-cycle t)             ;; Enable cycling for `corfu-next/previous'
      (corfu-auto t)              ;; Enable auto completion
      (corfu-auto-prefix 2)       ;; Minimum length of prefix for auto completion.
      (corfu-popupinfo-mode t)    ;; Enable popup information
      (corfu-popupinfo-delay 0.5) ;; Lower popupinfo delay to 0.5 seconds from 2 seconds

      (completion-ignore-case t)
      ;; Enable indentation+completion using the TAB key.
      ;; `completion-at-point' is often bound to M-TAB.
      (tab-always-indent 'complete)
      (corfu-preview-current nil) ;; Don't insert completion without confirmation
      ;; Emacs 30 will fix text-mode
      ;; Text-mode not working currently, because ispell-complete-word is called not completion-at-point
      ;; https://github.com/emacs-mirror/emacs/blob/1704fa4fb4164a15c7e258b922dbba190811d92d/etc/NEWS.30#L752
      ;; Corfu also has info in their readme, but no configuration is needed
      :init
      ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
      ;; be used globally (M-/).  See also the customization variable
      ;; `global-corfu-modes' to exclude certain modes.
      (global-corfu-mode))

    (use-package nerd-icons-corfu
      :after corfu
      :init (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))
#+end_src

** Cape
Provides Completion At Point Extensions which can be used in combination with Corfu, Company or the default completion UI.
Notes:
- The functions that are added later will be the first in the completion list.
- Take care when adding Capfs (Completion-at-point-functions) to the list since each of the Capfs adds a small runtime cost.
Read the [[https://github.com/minad/cape#configuration][configuration section]] in Cape's readme for more information.
#+begin_src emacs-lisp
    (use-package cape
      :after corfu
      :config
      ;; Add to the global default value of `completion-at-point-functions' which is
      ;; used by `completion-at-point'.  The order of the functions matters, the
      ;; first function returning a result wins.  Note that the list of buffer-local
      ;; completion functions takes precedence over the global list.
      ;; The functions that are added later will be the first in the list

      (add-to-list 'completion-at-point-functions #'cape-dabbrev) ;; Complete word from current buffers
      (add-to-list 'completion-at-point-functions #'cape-dict) ;; Dictionary completion
      (add-to-list 'completion-at-point-functions #'cape-file) ;; Path completion
      (add-to-list 'completion-at-point-functions #'cape-elisp-block) ;; Complete elisp in Org or Markdown mode
      (add-to-list 'completion-at-point-functions #'cape-keyword) ;; Keyword/Snipet completion

      ;;(add-to-list 'completion-at-point-functions #'cape-abbrev) ;; Complete abbreviation
      ;;(add-to-list 'completion-at-point-functions #'cape-history) ;; Complete from Eshell, Comint or minibuffer history
      ;;(add-to-list 'completion-at-point-functions #'cape-line) ;; Complete entire line from current buffer
      ;;(add-to-list 'completion-at-point-functions #'cape-elisp-symbol) ;; Complete Elisp symbol
      ;;(add-to-list 'completion-at-point-functions #'cape-tex) ;; Complete Unicode char from TeX command, e.g. \hbar
      ;;(add-to-list 'completion-at-point-functions #'cape-sgml) ;; Complete Unicode char from SGML entity, e.g., &alpha
      ;;(add-to-list 'completion-at-point-functions #'cape-rfc1345) ;; Complete Unicode char using RFC 1345 mnemonics
      )
#+end_src

** Orderless
Completion style that divides the pattern into space-separated components, and matches candidates that match all of the components in any order.
Recomended for packages like vertico, corfu.
#+begin_src emacs-lisp
    (use-package orderless
      :custom
      (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Vertico and Marginalia
- Vertico: Provides a performant and minimalistic vertical completion UI based on the default completion system.
- Savehist: Saves completion history.
- Marginalia: Adds extra metadata for completions in the margins (like descriptions).
- Nerd-icons-completion: Adds icons to completion candidates using the built in completion metadata functions.

We use this packages, because they use emacs native functions. Unlike Ivy or Helm.
One alternative is ivy and counsel, check out the [[https://github.com/MiniApollo/kickstart.emacs/wiki][project wiki]] for more inforomation.
#+begin_src emacs-lisp
    (use-package vertico
      :init
      (vertico-mode))

    (savehist-mode) ;; Enables save history mode

    (use-package marginalia
      :after vertico
      :init
      (marginalia-mode))

    (use-package nerd-icons-completion
      :after marginalia
      :config
      (nerd-icons-completion-mode)
      :hook
      ('marginalia-mode-hook . 'nerd-icons-completion-marginalia-setup))
#+end_src

** Consult
Provides search and navigation commands based on the Emacs completion function.
Check out their [[https://github.com/minad/consult][git repository]] for more awesome functions.
#+begin_src emacs-lisp
    (use-package consult
      ;; Enable automatic preview at point in the *Completions* buffer. This is
      ;; relevant when you use the default completion UI.
      :hook (completion-list-mode . consult-preview-at-point-mode)
      :init
      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0.5
            register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
            xref-show-definitions-function #'consult-xref)
      )
#+end_src

** UndoTree
Visualizes undo history.
#+begin_src emacs-lisp
    (use-package undo-tree
      :init
      (global-undo-tree-mode)
      :custom
      ;; Use separate directory for undo history
      (undo-tree-history-directory-alist '(("." . "~/.config/emacs/undoTree"))))
#+end_src
** Sudo edit
Utilities for opening files with root privileges (also works with doas).
#+begin_src emacs-lisp
    (use-package sudo-edit
      :defer
      :custom (sudo-edit-local-method "doas")) ;; To use doas
#+end_src

** Evil-mc
Multiple-cursors for evil mode.
#+begin_src emacs-lisp
    (use-package evil-mc
      :commands (evil-mc-mode))
#+end_src

** Diminish
This package implements hiding or abbreviation of the modeline displays (lighters) of minor-modes.
With this package installed, you can add ‘:diminish’ to any use-package block to hide that particular mode in the modeline.
#+begin_src emacs-lisp
    (use-package diminish)
#+end_src

** Rainbow Delimiters
Adds colors to brackets.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Rainbow Mode
Display the actual color as a background for any hex color value (ex. #ffffff).
The code block below enables rainbow-mode in all programming modes (prog-mode) as well as org-mode, which is why rainbow works in this document.
#+begin_src emacs-lisp
    (use-package rainbow-mode
      :diminish
      :hook
      ((org-mode prog-mode) . rainbow-mode))
#+end_src

** Which-key
Which-key is a helper utility for keychords (which key to press).
#+begin_src emacs-lisp
    (use-package which-key
      :ensure nil ;; Don't install which-key because it's now built-in
      :init
      (which-key-mode 1)
      :diminish
      :custom
      (which-key-side-window-location 'bottom)
      (which-key-sort-order #'which-key-key-order-alpha) ;; Same as default, except single characters are sorted alphabetically
      (which-key-sort-uppercase-first nil)
      (which-key-add-column-padding 1) ;; Number of spaces to add to the left of each column
      (which-key-min-display-lines 6)  ;; Increase the minimum lines to display, because the default is only 1
      (which-key-idle-delay 0.8)       ;; Set the time delay (in seconds) for the which-key popup to appear
      (which-key-max-description-length 25)
      (which-key-allow-imprecise-window-fit nil)) ;; Fixes which-key window slipping out in Emacs Daemon
#+end_src

** Ws-butler
Removes whitespace from the ends of lines.
#+begin_src emacs-lisp
    (use-package ws-butler
      :init (ws-butler-global-mode))
#+end_src

* Runtime Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time.
We also increase Read Process Output Max so emacs can read more data.
#+begin_src emacs-lisp
    ;; Make gc pauses faster by decreasing the threshold.
    (setq gc-cons-threshold (* 2 1000 1000))
    ;; Increase the amount of data which Emacs reads from the process
    (setq read-process-output-max (* 1024 1024)) ;; 1mb
#+end_src
